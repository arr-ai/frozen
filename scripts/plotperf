#!/usr/bin/env python3

import collections
import os
import re
import sys

import matplotlib.pyplot as plt
import numpy as np

def benchmark():
    return os.popen(
        'go test -run ^$ -cpuprofile cpu.prof -memprofile mem.prof -benchmem -bench ^BenchmarkInsert .',
        'r',
    )

def main():
    input = sys.stdin if not sys.stdin.isatty() else benchmark()

    lineRE = re.compile(r'BenchmarkInsert([a-zA-Z]*)(\d+)([kM]?)-\d+\s+\d+\s+([\d\.]+)\s+ns/op')

    mults = {
        '': 1,
        'k': 1<<10,
        'M': 1<<20,
    }

    renames = {
        'FrozenNode': 'frozen.branch',
        'FrozenMap': 'frozen.Map',
        'FrozenSet': 'frozen.Set',
        'MapInt': 'map[int]int',
        'MapInterface': 'map[interface{}]interface{}',
        'SetInt': 'set = map[int]struct{}',
        'SetInterface': 'set = map[interface{}]struct{}',
    }

    data = collections.defaultdict(dict)
    xes = set()
    for line in input.readlines():
        m = lineRE.match(line)
        if m:
            [label, n, m, t] = m.groups()
            label = renames[label]
            n = float(n) * mults[m] or 1
            t = float(t)
            data[label][n] = t
            xes.add(n)

    plt.loglog()
    for label in sorted(data.keys()):
        xys = sorted(data[label].items())
        plt.plot(*zip(*xys), label=label, marker='.')
    plt.ylim(100, 3000)
    plt.grid(True, axis='x')
    plt.grid(True, which='major', axis='y')
    plt.grid(True, which='minor', axis='y', alpha=0.5)
    plt.figlegend()
    plt.savefig('assets/benchmarks.png')

if __name__ == '__main__':
    main()
